# this should be run during the build process when things are changed. It generates tables
# that are used by the program

import os
from colour import Color
from typing import TextIO

a_side_colour = Color("red")
b_side_colour = Color("blue")
table_length = 256

path_to_tables = "/src/tables/"
file_name = "colours.h"

file_header = """// autogenerated by scripts/generate_colours.py
// do not modify!!
#include<Arduino.h>
#ifndef BRIGHTNESS_TABLES_H
#define BRIGHTNESS_TABLES_H
"""
array_footer = "};\n"
file_footer = "#endif"

colour_name = "colour"
mix_colour_name = "mix_colour"
array_name = "brightness_table"

def main():
    cwd = os.getcwd()
    with open(f"{cwd}{path_to_tables}{file_name}", 'w') as f:
        f.write(file_header)
        f.write("const uint32_t black = 0;\n")
        f.write(f"const uint32_t a_{colour_name} = {colour_to_int(a_side_colour)};\n")
        f.write(f"const uint32_t b_{colour_name} = {colour_to_int(b_side_colour)};\n")
        mix_colour = list(a_side_colour.range_to(b_side_colour, 3))[1]
        f.write(f"const uint32_t {mix_colour_name} = {colour_to_int(mix_colour)};\n")
        write_array(f, is_a=True)
        write_array(f, is_a=False)
        f.write(file_footer)

def colour_to_int(c: Color):
    return int(c.get_hex_l()[1:], 16)

def write_array(f: TextIO, is_a: bool):
        side_str = 'a' if is_a else 'b' 
        header = f"const uint32_t {side_str}_brightness_table[{table_length}] {{\n"
        colour = a_side_colour if is_a else b_side_colour
        black = Color("black")
        
        f.write(header)
        for c in colour.range_to(black, table_length):
            color_val = colour_to_int(c)
            f.write(f"    {color_val}")
            if c != black:
                f.write(",\n")
            else:
                f.write("\n")
        f.write(array_footer)
    
if __name__ == "__main__":
    main()