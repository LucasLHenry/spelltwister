# this should be run during the build process when things are changed. It generates tables
# that are used by the program

import os
from colour import Color
from typing import TextIO
import matplotlib.pyplot as plt
from copy import deepcopy


# TO TRY OUT DIFFERENT COLOURS, CHANGE ONLY THESE TWO LINES
a_side_colour = Color("orange")
b_side_colour = Color("blue")
dim_factor = 0.05
# EVERYTHING ELSE IS GENERATED BASED ON THESE TWO COLOURS




table_length = 256

path_to_tables = "/src/tables/"
file_name = "colours.h"

file_header = """// autogenerated by scripts/generate_colours.py
// do not modify!!
#include<stdint.h>
#ifndef BRIGHTNESS_TABLES_H
#define BRIGHTNESS_TABLES_H
"""
array_footer = "};\n"
file_footer = "#endif"

colour_name = "colour"
mix_colour_name = "mix_colour"
array_name = "brightness_table"

def main():
    file_path = f"{os.getcwd()}{path_to_tables}{file_name}"
    
    a_side_colour_dim = deepcopy(a_side_colour)
    a_side_colour_dim.set_luminance(dim_factor)
    b_side_colour_dim = deepcopy(b_side_colour)
    b_side_colour_dim.set_luminance(dim_factor)
    
    with open(file_path, 'w') as f:
        f.write(file_header)
        f.write("const uint32_t black = 0;\n")
        f.write(f"const uint32_t a_{colour_name} = {colour_to_int(a_side_colour)};\n")
        f.write(f"const uint32_t b_{colour_name} = {colour_to_int(b_side_colour)};\n")
        f.write(f"const uint32_t a_{colour_name}_dim = {colour_to_int(a_side_colour_dim)};\n")
        f.write(f"const uint32_t b_{colour_name}_dim = {colour_to_int(b_side_colour_dim)};\n")
        mix_colour = Color(rgb=(
            (a_side_colour.get_red()   + b_side_colour.get_red())   / 2,
            (a_side_colour.get_green() + b_side_colour.get_green()) / 2,
            (a_side_colour.get_blue()  + b_side_colour.get_blue())  / 2,
        ))
        mix_colour_dim = deepcopy(mix_colour)
        mix_colour_dim.set_luminance(dim_factor)
        f.write(f"const uint32_t {mix_colour_name} = {colour_to_int(mix_colour)};\n")
        f.write(f"const uint32_t {mix_colour_name}_dim = {colour_to_int(mix_colour_dim)};\n")
        write_array(f, is_a=True)
        write_array(f, is_a=False)
        f.write(file_footer)
        
    # with open(file_path, 'r') as f:
    #     display_colours(f)


def write_array(f: TextIO, is_a: bool):
        side_str = 'a' if is_a else 'b' 
        header = f"const uint32_t {side_str}_brightness_table[{table_length}] = {{\n"
        colour = a_side_colour if is_a else b_side_colour
        starting_l = colour.get_luminance()
        l_increment = starting_l / table_length
        
        f.write(header)
        for i in range(table_length):
            colour.set_luminance(l_increment * i)
            colour_val = colour_to_int(colour)
            f.write(f"    {colour_val}")
            if i != table_length - 1:
                f.write(",\n")
            else:
                f.write("\n")
        f.write(array_footer)
        
        
def display_colours(fp: TextIO):
    import re
    a_vals = []
    b_vals = []
    file_lines = fp.readlines()
    # 0 means preamble, 1 means inside a, 2 means between a and b, 3 means inside b
    file_section = 0
    for line in file_lines:
        if file_section in (1, 3):
            stripped_line = re.sub(r"\D", "", line)
            if stripped_line.isnumeric():
                if file_section == 1:
                    a_vals.append(parse_colour(int(stripped_line)))
                else:
                    b_vals.append(parse_colour(int(stripped_line)))
        if '{' in line or '}' in line: file_section += 1
    im_height = 256
    a_image = [[colour_to_list(c)] * im_height for c in a_vals]
    b_image = [[colour_to_list(c)] * im_height for c in b_vals]
    plt.imshow(a_image)
    plt.show()
    plt.imshow(b_image)
    plt.show()
    
def colour_to_list(c: Color) -> list[int]:
    return [c.get_red(), c.get_green(), c.get_blue()]
    
def colour_to_int(c: Color):
    return int(c.get_hex_l()[1:], 16)

def parse_colour(colour_val: int) -> Color:
    hex_str = hex(colour_val)[2:].rjust(6, '0')
    c = Color()
    c.set_red(  int(hex_str[:2],  16) / 255.0)
    c.set_green(int(hex_str[2:4], 16) / 255.0)
    c.set_blue( int(hex_str[4:],  16) / 255.0)
    return c

if __name__ == "__main__":
    main()